// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: information.proto
// Protobuf C++ Version: 5.29.3

#ifndef information_2eproto_2epb_2eh
#define information_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_information_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_information_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_information_2eproto;
class Information;
struct InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum RequestCode : int {
  USER_LOGIN = 0,
  REGISTER = 1,
  AES_DISTRIBUTION = 2,
  RequestCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RequestCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RequestCode_IsValid(int value);
extern const uint32_t RequestCode_internal_data_[];
constexpr RequestCode RequestCode_MIN = static_cast<RequestCode>(0);
constexpr RequestCode RequestCode_MAX = static_cast<RequestCode>(2);
constexpr int RequestCode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
RequestCode_descriptor();
template <typename T>
const std::string& RequestCode_Name(T value) {
  static_assert(std::is_same<T, RequestCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RequestCode_Name().");
  return RequestCode_Name(static_cast<RequestCode>(value));
}
template <>
inline const std::string& RequestCode_Name(RequestCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RequestCode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RequestCode_Parse(absl::string_view name, RequestCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestCode>(
      RequestCode_descriptor(), name, value);
}
enum ResponseCode : int {
  LOGIN_OK = 0,
  REGISTER_OK = 1,
  RSA_DISTRIBUTION = 2,
  AES_VERIFY_OK = 3,
  AES_VERIFY_FAILED = 4,
  REGISTER_FAILED = 5,
  LOGIN_FAILED = 6,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ResponseCode_IsValid(int value);
extern const uint32_t ResponseCode_internal_data_[];
constexpr ResponseCode ResponseCode_MIN = static_cast<ResponseCode>(0);
constexpr ResponseCode ResponseCode_MAX = static_cast<ResponseCode>(6);
constexpr int ResponseCode_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ResponseCode_descriptor();
template <typename T>
const std::string& ResponseCode_Name(T value) {
  static_assert(std::is_same<T, ResponseCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ResponseCode_Name().");
  return ResponseCode_Name(static_cast<ResponseCode>(value));
}
template <>
inline const std::string& ResponseCode_Name(ResponseCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ResponseCode_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ResponseCode_Parse(absl::string_view name, ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseCode>(
      ResponseCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Information final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  ~Information() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Information* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Information));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Information(
      ::google::protobuf::internal::ConstantInitialized);

  inline Information(const Information& from) : Information(nullptr, from) {}
  inline Information(Information&& from) noexcept
      : Information(nullptr, std::move(from)) {}
  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Information& default_instance() {
    return *internal_default_instance();
  }
  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
        &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Information& a, Information& b) { a.Swap(&b); }
  inline void Swap(Information* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Information* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Information>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Information& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Information& from) { Information::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Information* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Information"; }

 protected:
  explicit Information(::google::protobuf::Arena* arena);
  Information(::google::protobuf::Arena* arena, const Information& from);
  Information(::google::protobuf::Arena* arena, Information&& from) noexcept
      : Information(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserNameFieldNumber = 1,
    kData1FieldNumber = 2,
    kData2FieldNumber = 3,
    kData3FieldNumber = 4,
    kReqcodeFieldNumber = 5,
    kRescodeFieldNumber = 6,
  };
  // string user_name = 1;
  void clear_user_name() ;
  const std::string& user_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* value);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string data1 = 2;
  void clear_data1() ;
  const std::string& data1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data1(Arg_&& arg, Args_... args);
  std::string* mutable_data1();
  PROTOBUF_NODISCARD std::string* release_data1();
  void set_allocated_data1(std::string* value);

  private:
  const std::string& _internal_data1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data1(
      const std::string& value);
  std::string* _internal_mutable_data1();

  public:
  // string data2 = 3;
  void clear_data2() ;
  const std::string& data2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data2(Arg_&& arg, Args_... args);
  std::string* mutable_data2();
  PROTOBUF_NODISCARD std::string* release_data2();
  void set_allocated_data2(std::string* value);

  private:
  const std::string& _internal_data2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data2(
      const std::string& value);
  std::string* _internal_mutable_data2();

  public:
  // string data3 = 4;
  void clear_data3() ;
  const std::string& data3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data3(Arg_&& arg, Args_... args);
  std::string* mutable_data3();
  PROTOBUF_NODISCARD std::string* release_data3();
  void set_allocated_data3(std::string* value);

  private:
  const std::string& _internal_data3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data3(
      const std::string& value);
  std::string* _internal_mutable_data3();

  public:
  // .RequestCode reqcode = 5;
  void clear_reqcode() ;
  ::RequestCode reqcode() const;
  void set_reqcode(::RequestCode value);

  private:
  ::RequestCode _internal_reqcode() const;
  void _internal_set_reqcode(::RequestCode value);

  public:
  // .ResponseCode rescode = 6;
  void clear_rescode() ;
  ::ResponseCode rescode() const;
  void set_rescode(::ResponseCode value);

  private:
  ::ResponseCode _internal_rescode() const;
  void _internal_set_rescode(::ResponseCode value);

  public:
  // @@protoc_insertion_point(class_scope:Information)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Information& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_name_;
    ::google::protobuf::internal::ArenaStringPtr data1_;
    ::google::protobuf::internal::ArenaStringPtr data2_;
    ::google::protobuf::internal::ArenaStringPtr data3_;
    int reqcode_;
    int rescode_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_information_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Information

// string user_name = 1;
inline void Information::clear_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& Information::user_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Information.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Information.user_name)
}
inline std::string* Information::mutable_user_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:Information.user_name)
  return _s;
}
inline const std::string& Information::_internal_user_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_name_.Get();
}
inline void Information::_internal_set_user_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_name_.Mutable( GetArena());
}
inline std::string* Information::release_user_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Information.user_name)
  return _impl_.user_name_.Release();
}
inline void Information::set_allocated_user_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Information.user_name)
}

// string data1 = 2;
inline void Information::clear_data1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data1_.ClearToEmpty();
}
inline const std::string& Information::data1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Information.data1)
  return _internal_data1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_data1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Information.data1)
}
inline std::string* Information::mutable_data1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data1();
  // @@protoc_insertion_point(field_mutable:Information.data1)
  return _s;
}
inline const std::string& Information::_internal_data1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data1_.Get();
}
inline void Information::_internal_set_data1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data1_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_data1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data1_.Mutable( GetArena());
}
inline std::string* Information::release_data1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Information.data1)
  return _impl_.data1_.Release();
}
inline void Information::set_allocated_data1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data1_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data1_.IsDefault()) {
    _impl_.data1_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Information.data1)
}

// string data2 = 3;
inline void Information::clear_data2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data2_.ClearToEmpty();
}
inline const std::string& Information::data2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Information.data2)
  return _internal_data2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_data2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Information.data2)
}
inline std::string* Information::mutable_data2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data2();
  // @@protoc_insertion_point(field_mutable:Information.data2)
  return _s;
}
inline const std::string& Information::_internal_data2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data2_.Get();
}
inline void Information::_internal_set_data2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data2_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_data2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data2_.Mutable( GetArena());
}
inline std::string* Information::release_data2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Information.data2)
  return _impl_.data2_.Release();
}
inline void Information::set_allocated_data2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data2_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data2_.IsDefault()) {
    _impl_.data2_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Information.data2)
}

// string data3 = 4;
inline void Information::clear_data3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data3_.ClearToEmpty();
}
inline const std::string& Information::data3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Information.data3)
  return _internal_data3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_data3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Information.data3)
}
inline std::string* Information::mutable_data3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data3();
  // @@protoc_insertion_point(field_mutable:Information.data3)
  return _s;
}
inline const std::string& Information::_internal_data3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data3_.Get();
}
inline void Information::_internal_set_data3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data3_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_data3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data3_.Mutable( GetArena());
}
inline std::string* Information::release_data3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Information.data3)
  return _impl_.data3_.Release();
}
inline void Information::set_allocated_data3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data3_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.data3_.IsDefault()) {
    _impl_.data3_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Information.data3)
}

// .RequestCode reqcode = 5;
inline void Information::clear_reqcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqcode_ = 0;
}
inline ::RequestCode Information::reqcode() const {
  // @@protoc_insertion_point(field_get:Information.reqcode)
  return _internal_reqcode();
}
inline void Information::set_reqcode(::RequestCode value) {
  _internal_set_reqcode(value);
  // @@protoc_insertion_point(field_set:Information.reqcode)
}
inline ::RequestCode Information::_internal_reqcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::RequestCode>(_impl_.reqcode_);
}
inline void Information::_internal_set_reqcode(::RequestCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reqcode_ = value;
}

// .ResponseCode rescode = 6;
inline void Information::clear_rescode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rescode_ = 0;
}
inline ::ResponseCode Information::rescode() const {
  // @@protoc_insertion_point(field_get:Information.rescode)
  return _internal_rescode();
}
inline void Information::set_rescode(::ResponseCode value) {
  _internal_set_rescode(value);
  // @@protoc_insertion_point(field_set:Information.rescode)
}
inline ::ResponseCode Information::_internal_rescode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ResponseCode>(_impl_.rescode_);
}
inline void Information::_internal_set_rescode(::ResponseCode value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rescode_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::RequestCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::RequestCode>() {
  return ::RequestCode_descriptor();
}
template <>
struct is_proto_enum<::ResponseCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ResponseCode>() {
  return ::ResponseCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // information_2eproto_2epb_2eh
